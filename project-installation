1. Create a new project in WS
2. Run `npm init -y` in terminal
    In case to connecting with GitHub:
    3. Run `git init` in terminal
        3.1. Run commands in terminal:
        -   git add README.md
        -   git branch -M main
        3.2. Create new branch
        3.3. Create `.gitignore` file and add there `.idea` and `node_modules`
        3.4. make a commit
        3.5. Push to origin
4. Installing and configuring Babel:
    4.1. Install necessary packages:
        - run in terminal: `npm i @babel/core @babel/preset-env @babel/register`
    4.2. Create `.babelrc` file and put following in it:
         `  {"presets": ["@babel/preset-env"]}`
5. Installing and config Prettier:
    5.1. npm i prettier
    5.2. check if Prettier plugin installed to WS
    5.3. goto Settings/Languages and Frameworks/Prettier, check the path and choose the options
    5.4. create .prettierrc.js file and put into:
        module.exports = {
            trailingComma: "es5",
            tabWidth: 2,
            semi: false,
            singleQuote: true,
            bracketSpacing: true,
            arrowParens: "avoid",
          }
6.  Install & config mocha test runner:
    6.1. npm i mocha
    6.2. create `.mocharc.js` file
    6.3. paste following into .mocharc (comment unnecessary option!!!!):
         module.exports = {
             require: ['@babel/register'],
             spec: 'path to tests directory',
             exclude: 'path to files to be excluded from test run',
             file: `path to global hook`,                               //will be described below
         }
    6.4. modify `test` script:
        -   "test": "mocha --config .mocharc.js"
7.  Install supertest (HTTP client) & chai (assertion library) packages:
    -   npm i supertest chai
8. Creating fist test example
    8.1. Create `tests` directory
    8.2. Add this directory to .mocharc
    8.3. Create first spec file named example.spec.js inside of `tests` folder
    8.4. Create simple test for common function (for example function sum()):
        -   import { expect } from chai
        -   create `describe` and `it` with relevant names
        -   write assertion
        -   run the test with CLI command / 'play' sign
        -   change the assertion value to invalid output to check if test works properly
        -   add some more tests for any other functions (as a HomeWork)
9. Authentication tests:
    9.1. Create a spec file: 'auth.js'
    9.2. Import necessary packages:
        -   import supertest from 'supertest'
        -   import { expect } from ' chai'
    9.3. Create a test with valid credentials:
        - request syntax:
            describe('Authentication', () => {
                let res                                                                   // create a variable to assign a response
                it('Login with valid credentials', async () => {                          // using async function to catch the promise
                    res = await supertest('https://clientbase-server.herokuapp.com/v5/')  // pass the base URL to request body
                        .post('user/login')                                               // method and endpoint
                        .set('HeaderName', HeaderValue)                                   // set the headers  (optional)
                        .send({email: 'jacksparrow@pirate.com', password: 'Pirate666!'})  // pass the body in JSON object format

                    expect(res.statusCode).to.eq(200)                                     // assertion for response statusCode
                                                                                          // for assertion syntax see https://www.chaijs.com/api/bdd/
                });
    9.4. Exclude example.spec file from tests by adding following to .mocharrc:
            - exclude: 'tests/example.spec.js'
    9.5. Create a test with invalid credentials
    9.6. Add more tests for both describes:
        -   test for response message
        -   test for token
        -   test for any property inside of response
