Create a new project in VSC

Preconditions:

- install VSC, node, git
- create a GitHub account
- create an account in CBv6
- create client/vendor/service/order (optional)

1.  Run `npm init -y` in terminal

2.  Connecting to remote repo:
    2.1   Create a remote repo
    2.2.  Run `git init` in terminal
    2.3.  Run commands in terminal:
            - git status                                                        // optional - shows status of files
            - git add .                                                         // adds all new files to git
            - git status                                                        // optional - to see the changes
            - git commit -m "initial commit"                                    // adds first commit
            - git branch -M main                                                // changes the name from master to main
            - git remote                                                        // optional - verify no remote exists
            - git remote add origin https://github.com/user_name/project_name   // connect remote repo to local
            - git status                                                        // optional - to see the changes
            - git remote                                                        // optional - verify remote added
            - git branch                                                        // shows all available branches
            - git branch -d 'master'                                            // deletes master branch
            - git push -u origin main                                           // push changes to remote main

            - WARNING: in case of getting this error:
                fatal: The current branch test has no upstream branch.
                To push the current branch and set the remote as upstream
            - add following to .git/config file:
                [push]
                	autoSetupRemote = true

            - WARNING: in case git will ask about a password - generate PAT (personal access token) in
              User/Settings/Developer Settings/Personal Access Token,
              then copy it and paste when git requires password

    2.4.  Create new branch named 'git-config'
            - git checkout -b 'git-config'
    2.5.  Create `.gitignore` file and add there `.idea` and `node_modules`
    2.6.  Add new files to git;
            -   git add .
    2.7.  Make a commit
            - git commit -m 'git-ignore'
    2.8.  Push to origin
            - git push -u origin main
    2.9.  Switch to main
    2.10.  Goto GitHub and create PR
    2.11.  Select Squash and merge option and confirm it
    2.12.  Update local main from remote main by git pull command
    2.13.  Delete local 'git-config' branch:
            - git branch -d git-config

3.  Explain and install extensions
    3.1. Useful extensions for VSC:
        Functional:
         - Tabnine              -   coding assistant and AI
         - Code Spell Checker   -   Spelling checker for source code
         - ES6 Mocha snippets   -   add snippets to code
         - GitHub Actions       -   to see and manage GitHub Actions runs & options
        Design:
         - Material Icon Theme  -   files and folders icons

    3.2.  OPTIONAL: Create readme. Check markdown syntax. Check Readme templates
    3.3.  https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes

 -----------------------------------------------------------------------------------------------------------------------

4.  Installing and configuring Babel:
    4.1.  Create a new branch
    4.2.  Install necessary packages:
            - run in terminal: `npm i @babel/core @babel/preset-env @babel/register`
    4.3.  Create `.babelrc` file on root dir and put following in it:

              {"presets": ["@babel/preset-env"]}

    4.4.  OPTIONAL: Add Babel JavaScript Extension

------------------------------------------------------------------------------------------------------------------------
WARNING: DOESN'T WORK IN MY ENVIRONMENT

5.  Installing and config Prettier:
    5.1.  In terminal: npm i prettier
    5.2.  Check if Prettier plugin installed to VSC (goto Extensions/search for prettier)
    5.3.  Goto Settings/Languages and Frameworks/JavaScript/Prettier, check the path and choose the options
    5.4.  Create .prettierrc.js file on root dir and put into:

                module.exports = {
                    trailingComma: "es5",
                    tabWidth: 2,
                    semi: false,
                    singleQuote: true,
                    bracketSpacing: true,
                    arrowParens: "avoid",
                  }
------------------------------------------------------------------------------------------------------------------------

6.  Install & config mocha test runner:
    6.1.  Create new branch
    6.2.  In terminal: npm i mocha
    6.3.  Create `.mocharc.js` file (https://github.com/mochajs/mocha/blob/master/example/config/.mocharc.js)
    6.4.  Paste following into .mocharc:

            module.exports = {
              require: ['@babel/register'],
              timeout: '5000',
           }
    6.5.  Modify `test` script:
             -   "test": "mocha --config .mocharc.js"                    // 'mocha' to run local mocha version
                 // if mocharc.js locates in root directory
                 // '--config .file_name' could be skipped

7.  Install supertest (HTTP client) & chai (assertion library) packages:
                -   npm i supertest chai@4                               // chai v^5 unstable (?) - check what is ESM
    7.1.    Add, commit, push & PR
    7.2.    Update main branch / delete created (optional)

 -----------------------------------------------------------------------------------------------------------------------

8.  Creating first test example
    8.1.    Create a new branch
    8.2.    Create `tests` directory              // mocha by default search for 'test' folder and run tests inside
    8.3.    Add this directory to .mocharc:
             - spec: 'tests/**/*.js'              // WARNING: this option will block running single tests by name in CLI

    8.4.    Create first spec file named example.spec.js inside of `tests` folder
    8.5.    Create simple test for common function (for example function sum()):
             -   import { expect } from chai
             -   create `describe` and `it` with relevant names
             -   write assertion:

                  describe('VERIFY SIMPLE MATH FUNCTIONS', () => {
                     it('verify sum working properly', () => {
                         expect(5+5).to.eq(10)
                     });
                  });

             -   run the test with CLI command / npm run test
             -   change the assertion value to invalid output to check if test works properly
             -   add some more tests for any other functions (optional)

    8.7.    Add npm i -D colors                                    // colorize console output(https://www.npmjs.com/package/colors)
                -   add import colors from 'colors'
                -   syntax for colors use:

                    describe('VERIFY SIMPLE FUNCTIONS', () => {
                        it('verify sum works properly', () => {
                            expect(5+5).to.eq(10);
                            console.log(colors.yellow('This test verify sum'));
                        });

                        it('verify deduction works properly', () => {
                            expect(5-5).to.eq(0);
                            console.log(colors.red('This test verify deduction'));
                        });

                        it('verify multiply works properly', () => {
                            expect(5*5).to.eq(25);
                            console.log(colors.blue('This test verify multiply'));
                        });

                        it('verify division works properly', () => {
                            expect(5/5).to.eq(1);
                            console.log(colors.green('This test verify division'));
                        });

                    });

    8.7.    Add, commit, push & PR
    8.8.    Update main branch / delete created (optional)
    8.9.    HW: create more tests (math, string, array)

9.  Authentication tests:
    9.1.    Create a new branch
    9.2.    Create a spec file: 'auth.spec.js'
    9.3.    Import necessary packages:
                -   import request from 'supertest'
                -   import { expect } from ' chai'
    9.4.    Create a test with valid credentials:
                - request syntax:

        describe('Authentication', () => {
          let res                                                                   // create a variable to assign a response
            it('Login with valid credentials', async () => {                        // using async function to catch the promise
               res = await request('https://clientbase-server.herokuapp.com/v6/')   // pass the base URL to request body
                  .post('user/login')                                               // method and endpoint
                  .set('HeaderName', HeaderValue)                                   // set the headers  (optional)
                  .send({email: 'jacksparrow@pirate.com', password: 'Pirate666!'})  // pass the body in JSON object format

              expect(res.status).to.eq(200)                                         // assertion for response statusCode
                                                                                    // for assertion syntax see https://www.chaijs.com/api/bdd/
            });
        })

    9.5.    Exclude example.spec file from tests by adding following to .mocharc:
                - exclude: 'tests/example.spec.js'                                  // 'ignore' also could be used
    9.6.    Run test
    9.6.    Create a test with invalid credentials
    9.7.    Add more tests for both describes:
                -   test for response message
                -   test for token
                -   test for any property inside of response
    9.8.    Commit, push & PR
    9.9.    Update main branch / delete created (optional)

 -----------------------------------------------------------------------------------------------------------------------

10. Add environment variables:
    10.1.   Create a new branch
    10.2.   Install dotenv package (based on dotenv documentation - https://www.npmjs.com/package/dotenv)
            -   npm i dotenv
    10.3.   Create .env file with variables inside (DO NOT ADD IT TO GITHUB!!!)
            -   BASE_URL="server_url"
                EMAIL="valid_email"
                PASSWORD="valid_password"
    10.4.   Add .env file to .gitignore
    10.5.   Create .env.example file with common credentials.
    10.6.   Add following to the tests file:
               -   import 'dotenv/config'
    10.7.   Replace all open data to env variables
    10.8.   OPTIONAL - Install extension 'Dotenv Official' (tooltips and highlights for env syntax)
    10.9.   Commit, push & PR
    10.10.   Update main branch


11. Add local hooks:
    11.1.   Create a new branch
    11.2.   Create 'before' hook and move there auth API request
                -   NB: variable res should be moved above 'before' hook
    11.3.   Delete request from subsequent tests
    11.4.   Split positive and negative tests by adding another describe
    11.5.   Create separate it for each assertion



12. Add global hook:
    12.1.   Create new directory (config/general/global-hooks/setup, etc...) in root folder
    12.2.   Inside created folder add new .js file (config/general/global-hook/setup, etc...)
    12.3.   Inside the created file:
            -   import 'dotenv/config'
            -   import request from 'supertest'
            -   copy 'before' hook from auth.spec
            -   declare new env variable named 'token':
                process.env.TOKEN = path to response property (res.body.payload.token)
            -   add option to .mocharc configuration file:
                file: `path to global hook` ('config/setup.js')
            -   now dotenv will be imported in only one file (remove it from auth.spec.js)
    12.4.   Commit, push & PR
    12.5.   Update main branch / delete created (optional)

 -----------------------------------------------------------------------------------------------------------------------

13. Create first helper:
    13.1.   Create a new branch
    13.2.   Create a new directory 'Helpers' in root folder
    13.3.   Create generalHelper.js file
    13.4.   Inside the file:
            -   import request from 'supertest'
            -   create a function with relevant name and following syntax:
                function login(){                                                   // function name and params
                    return request(process.env.BASE_URL)                            // function return
                    .post('user/login')
                    .send({email: process.env.EMAIL, password: process.env.PASSWORD})
                    }
            -   export created function:
                export { login }                                                    // function should be exported
            -   function could be exported with following syntax as well:
                       export function name(){}
            -   export {function_name} could be deleted now
            -   import helper to spec file:
                import { login } from '../helpers/generalHelper'                    // import particular function
                or
                import * as generalHelper from '../helpers/generalHelper'           // import module
                    /*
                      Short brief to syntax of relative paths:
                        ..  -   two dots moves up to a parent directory (which is a root directory of a project in this case)
                        .   -   one dots represent the current directory (which is a tests directory in this case)
                    */
            -   replace requests in auth.spec.js to login function
            -   parametrize the function
                    function login(email, password){
                        return request(process.env.BASE_URL)
                        .post('user/login')
                        .send({email: email, password: password})
                    }
            -   as per JS rules change sending object to `.send{email, password}
            -   replace request in auth-global-hook to login function
            -   remove unnecessary imports
    13.5.   Commit, push & PR
    13.6.   Update main branch / delete created (optional)


14. Create a CI/CD pipeline:
        - IMPORTANT: merge blocking could be implemented only in GitHub Team or Enterprise organization account

    14.1.   Create a new branch
    14.2.   Goto Actions Tab
    14.3.   Search for 'Node.js' workflow and click to 'Config button'
    14.4.   Change the name of .yaml file
    14.5.   Change the name of the workflow
    14.6.   Update .yml file as:

            name: API-CBv6-v2-CI

            on:                                                     // when the pipeline will run
              push:
                branches: [ "main" ]                                // on the push branches
              pull_request:
                branches: [ "main" ]                                // before the pull request to main branch

            jobs:
              user_name:                                            // job name / status check name

                runs-on: ubuntu-latest                              // define the OS of VM to use the tests runs

                strategy:
                  matrix:                                           // define the node version to be installed to VM
                    node-version: [18.x, 20.x]                      // define runs in node versions

                steps:                                              // describe all steps of the workflow
                - uses: actions/checkout@v3                         // GiHub internal tool for checkout current branch code
                - name: Use Node.js ${{ matrix.node-version }}      // install declared version of Node.js and dependencies from package-lock.json
                  uses: actions/setup-node@v3                       // GiHub internal tool for setup node
                  with:
                    node-version: ${{ matrix.node-version }}        // declare which version of node will be used
                - name: Install dependencies                        // step name
                  run: npm i                                        // command to be executed
                - name: Run API tests                               // step name
                  env:                                              // declare the env variables
                    BASE_URL: ${{ secrets.BASE_URL }}
                    EMAIL: ${{ secrets.EMAIL }}
                    PASSWORD: ${{ secrets.PASSWORD }}
                  run: npm run test                                     // command to be executed

    14.7.   Create the new branch and PR for workflow .yaml file:
                -   click on 'Start commit' button
                -   click on radiobutton 'Create a new branch' and rename it to 'github-actions'
                -   add commit name 'create ci/cd pipeline'
                -   click to 'Propose new file'
                -   the new pull request automatically opened
                -   before create and close PR we have to declare env variables
    14.8.   Create a secret env variables (open setting in a new window):
                -   goto settings/secrets/actions
                -   click on 'New repository secret' / add name / add value  (repeat for all variables)
    14.9.  Merge PR:
                -   back to PR and click on create PR
                -   merge PR
    14.10.  Update main branch / delete created (optional)
    14.11.  Verify .github/workflows/test.yml exist in the tree
    14.12.  To block merging before CI test runs (could be implemented only in GitHub Team or Enterprise organization account):
                -   go to Settings / Branches
                -   click add rule
                -   check-in 'Require status checks to pass before merging'
                -   add the status checks (jobs) we want

-----------------------------------------------------------------------------------------------------------------------

15. Creating tests for User Register:
    15.1.   Create a new branch
    15.2.   Create a new spec
    15.3.   Import expect, supertest
    15.4.   Create a User Creation request:

            describe('Create a user with valid credentials', () => {
                let res
                it('check the response status code', async () => {
                    res = await request(process.env.BASE_URL).post('user').send({
                        firstName: 'Jake',
                        lastName: 'Sully',
                        email: 'jakesully12@pirate.com',
                        password: process.env.PASSWORD,
                    })
                    expect(res.status).to.eq(201)
                    expect(res.body.message).contain('User created')
                })
            });

    15.5.   Add script for single test in package.json:
            -

    15.5.   Add randomizer to project:
    15.6.   Install the randomizer (https://chancejs.com/):
            -   npm install -D chance
    15.7.   Import randomizer
            -   const chance = require('chance').Chance()
    15.8.   Replace request body properties with random data using chance
    15.9.   for email use:
                const newEmail = 'user' + Date.now() + '@pirate.com'
    15.9.   Commit, push & PR
    15.10.  Update main branch / delete created (optional)
    15.11.  HW: add more test suits for user registration


16. Creating Register helper:
    16.1.   Create new branch
    16.2.   Inside the general-helper.js file:
            -   import request from 'supertest'
            -   create a function with relevant name and following syntax:

            function registration(firsName, lastName, email, password){        // function name and params
               return request(process.env.BASE_URL)                        // function return
                      .post('user')
                      .send({firstName: firstName, lastName: lastName, email: email, password: password})
            }
            -   export created function by adding to export:
                export { login, registration }                                  // function should be exported
    16.4.   import helper to spec file:
            -   import { registration } from '../helpers/general-helper.js'     // import created function to spec file
    16.5.   Replace requests in register.spec.js to register function
    16.6.   Remove unnecessary imports
    16.4.   Create a before hook and move register request to it
    16.5.   OPTIONAL: pass default values to registration function
    16.6.   Repeat steps 16.5. and 16.6. for Register negative tests
    16.7.   Commit, push & PR
    16.8.   Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------
17.  Creating various tests:
    17.1.  Creating test for space trimming:
    17.2.   Create a new branch
    17.3.   Create a new spec file named 'various.spec.js'
    17.4.   Create a new test in various.spec.js:
            -   create a describe
            -   create an it
            -   define which requests should be sent              // create user / login
            -   create a variables (testEmail, res)
            -   create before hook with registration request
            -   add auth request and assertion to it              // mention import 'login' added to file
            -   move auth request to before hook
            -   split assertions to separate its:

                     describe.only('Space trimming test', () => {
                          let newEmail = ' james' + Date.now() + '@pirate.com   '
                          let res

                          before(async()=>{
                              await register(chance.first(), chance.last(), testEmail, process.env.PASSWORD)
                              res = await login((testEmail.trim()), process.env.PASSWORD)

                               console.log(testEmail)                                               // optional
                               console.log(testEmail.trim())                                        // optional
                               console.log(res.body.payload.user.email)                             // optional
                          })

                          it('verify login response status', () => {
                              expect(res.statusCode).to.eq(200)
                          });

                          it('verify login response message', async() => {
                              expect(res.body.message).to.eq('Auth success')
                          });

                          it('verify the email in response is equal to trimmed email', () => {      // optional / just an example
                               expect(res.body.payload.user.email).to.eq(newEmail.trim())
                          });
                     });

    17.5.   Commit, push & PR
    17.6.  Update main branch / delete created (optional)

    17.7.   Create a new branch
    17.8.   Create 'email confirmation test':

    17.9.   Create a new test in various.spec.js:
            -   create a describe
            -   create an it
            -   define which requests should be sent
            -   create a variables (str, endPoint, res, check)
            -   create before hook and put requests inside:
                -   register request                                // to create new user
                -   email search request                            // to find the email
            -   create a function to take apart the endPoint
            -   create a request to verify the email                // to confirm email
            -   create a authentication request                     // to check the role of verified user
            -   write the assertions:
                -   statusCode
                -   message
                -   role

            describe('Email confirmation', () => {
                const testEmail = 'user_' + Date.now() + '@pirate.com'
                let str, endPoint, res, check
                before(async () => {
                    await register(chance.first(), chance.last(), testEmail, process.env.PASSWORD)
                    str = await request('https://clientbase-server.herokuapp.com')                 // create a helper
                                            .post('/email/search')
                                            .send({ email: newEmail })

                    endPoint = str.body.payload.items[0].message.split('\n')[4].split('https://clientbase.us')[1]

                    // jsbin could be used for explanation of getting endPoint value

                    res = await request('https://clientbase-server.herokuapp.com').get(endPoint).send()

                    check = await login(newEmail, process.env.PASSWORD)
                })

                it('verify confirm email response status', () => {
                    expect(res.statusCode).to.eq(200)
                })

                it('verify confirm email response message', () => {
                    expect(res.body.message).to.include('confirmed')
                })

                it('verify user role', () => {
                    expect(check.body.payload.user.roles).to.include('verified')
                })
            })

    17.10.   Commit, push & PR
    17.11.   Update main branch / delete created (optional)


------------------------------------------------------------------------------------------------------------------------

18. Setup the reporter:
    https://www.npmjs.com/package/mochawesome

    18.1.  Install the mochawesome reporter:
            -   npm install mochawesome
    18.2.  Add the option to .mocharc file or to the script:
                 reporter: 'mochawesome'                                     // in .mocharc.js
                 --reporter mochawesome                                      // in script
    18.3.  Change the configuration if needed:

            -   using 'reporter-options' flag in mocha config or script
            -   reportDir=MyReports                                         // changing the reports directory
            -   reportFilename=updatedReport                                // changing the file name
                some options for report name: [status]_[datetime]:          // add status and timestamp to file name
                    reportFilename=[status]_[datetime]_ReportName           // good for keeping all reports
            -   json=false                                                  // turn off creating json report
            -   quiet=true                                                  // turn off mochawesome console messages

            in .mocharc.js add:
            reporterOptions: ['reportDir=MyReports', 'reportFilename=updatedReport','json=false', 'quiet=true']

    18.4.  OPTIONAL: add report directory to .gitignore
    18.5.  Explain design of report
    18.6.  Add artifact upload to pipeline:
            -    - name: Upload test results
                   uses: actions/upload-artifact@v3                         // GiHub internal tool for upload files
                   with:
                    name: test-report
                    path: path_to_file                                      // in my case: MyReports
    18.7.  Commit, push & PR
    18.8.  Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------


19.  Creating Clients tests
     19.1.  Create new branch clients
     19.2.  Create clients directory and clientCreate.spec.js file
     19.3.  Make necessary imports                                  // note that request command could be named as you wish
     19.4.  Create test for new client creation:
                -   describe('Clients create positive', () => {
                    let res
                    it('Create a client', async() => {
                        res = await request(process.env.BASE_URL)
                            .post('client')
                            .set('Authorization', process.env.TOKEN)
                            .send({
                                name: chance.name(),
                                phone: chance.phone(),
                                email: chance.email()
                            })
                        expect(res.statusCode).to.eq(200)
                        expect(res.body.message).to.eq('Client created')
                        expect(res.body.payload).not.to.be.empty
                        expect(res.body.payload).to.be.a('string')
                    });
                });
     19.5.  Create before hook and split assertions to separate tests
     19.6.  Create a client-helper and add there 'create' function
                -   function createClient(){
                    return request(process.env.BASE_URL)
                        .post('client')
                        .set('Authorization', process.env.TOKEN)
                        .send({
                            name: 'Client_' + Date.now(),
                            phone: chance.phone()
                        })
                }
     19.7.  Import client-helper into client.spec.js:
                -   import * as clientHelper from '../helpers/client-helper'
                -   explain syntax
     19.8.  Parametrize createClient:
                function createClient(email = '', description = '', name = chance.name(), phone = chance.phone())
     19.9.  Change clients.spec file and remove unnecessary imports
     19.10. Commit, push & PR
     19.11. Update main branch / delete created (optional)
     19.12. Create a client without phone produce a bug so those tests should be skipped
            This will help keep CI runs passing

------------------------------------------------------------------------------------------------------------------------

20.  Create more clients tests:
     20.1. Create 'Get all clients':
           -    Create a test for getting all clients inside of clients spec:
                describe('Get all clients', () => {
                  let res
                  it('check the response status', async() => {
                    res = await request(process.env.BASE_URL)
                        .post('client/search')
                        .set('Authorization', process.env.TOKEN)
                        .send({limit: 30})
                    expect(res.statusCode).to.eq(200)
                    expect(res.body.payload.items).to.be.a('array')
                    expect(res.body.payload.items[0]).has.property('_id')
                  });
                });
           -    create before hook
           -    split assertions
           -    create a function inside client-helper.js
           -    to make this test autonomous add clientHelper.createClient() to before hook
           -    add for loop to last assertion for checking all clients:               // as an example of using loops in tests
                    it('check the array elements has id', () => {
                          let clientsList = res.body.payload.items
                          for (let i = 0; i < clientsList.length; i++) {
                            expect(clientsList[i]).has.property('_id')
                          }
                        })

     20.2.  Create 'Get single client':
            -   create a test for getting client by ID:
                describe('Get single client', () => {
                  let res
                  let clientId
                  before(async()=>{                                                     // in case DB does not contains any clients
                    clientId = (await clientHelper.createClient()).body.payload               // get clientID from created client
                  })
                  it('check the response status',async() => {
                    res = await request(process.env.BASE_URL)
                        .get('client/' + clientId)
                        .set('Authorization', process.env.TOKEN)
                    expect(res.statusCode).to.eq(200)
                  });
                });
            -   create before hook
            -   create a function inside client-helper.js
     20.3.  Create 'Get client by name':
            -   create a test for getting client by name:
                 before(async()=>{
                    clientId = (await clientHelper.create()).body.payload
                    clientName = (await clientHelper.getSingle(clientId)).body.payload.name
                    res = await request(process.env.BASE_URL)
                        .post('client/search')
                        .set('Authorization', process.env.TOKEN)
                        .send({name: clientName})
                  })
            -   create before hook
            -   create a function inside client-helper.js
     20.4.  Commit, push & PR
     20.5.  Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------

21.  Create delete client test:
     21.1.  Open new branch
     21.2.  Create a describe:
            describe.only('Delete the client', () => {
                let res
                let clientId
                it('check the response status', async() => {
                  clientId = (await clientHelper.createClient()).body.payload
                  res = await request(process.env.BASE_URL)
                      .delete('client/' + clientId)
                      .set('Authorization', process.env.TOKEN)
                  expect(res.statusCode).to.eq(200)
                  expect(res.body.message).to.eq('Client deleted')
                });
              });
     21.3.  Create before hook
     21.4.  Create a function inside client-helper.js
     21.5.  Check if the deleted client does not exist in the database:
            -   create a client
            -   get clientId
            -   delete client
            -   send getClientById request:
                describe('Check if client actually deleted', () => {
                    let res
                    let clientId

                    before(async () => {
                      clientId = (await clientHelper.createClient()).body.payload
                      await clientHelper.deleteClient(clientId)
                      res = await clientHelper.getSingle(clientId)
                    })

                    it('check the response status',  () => {
                      expect(res.statusCode).to.eq(404)
                    })
                    it('check the response message',  () => {
                      expect(res.body.message).to.eq('No client for provided id')
                    })
                  })
     21.6.  Commit, push & PR
     21.7.  Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------
22.  Create update client test:
     22.1.  Open new branch
     22.2.  Create a describe:
            describe('Update client', () => {
              let res
              let clientId
              it('update client', async() => {
                clientId = (await clientHelper.create()).body.payload
                res = await request(process.env.BASE_URL)
                    .patch(`client/${clientId}``)
                    .set('Authorization', process.env.TOKEN)
                    .send({name: 'updatedClient', phone: 'updatedPhone'})
                expect(res.statusCode).to.eq(200)
                expect(res.body.message).to.eq('Client updated')
              });
            });
     22.3.  Create before hook
     22.4.  Create a function inside client-helper.js
     22.5.  To make updateClient function to be usable for all params:

             - function updateClient(clientId, param, data) {
                     return request(process.env.BASE_URL)
                         .patch(`client/${clientId}`)
                         .set('Authorization', process.env.TOKEN)
                         .send({[param]: data})
             }

     // EXPLANATION: In JavaScript, if you want to use a variable as a key in an object literal,
     you can use square brackets around the variable name to compute the property name at runtime.
     This allows you to dynamically set the key of the property based on the value of a variable.

     22.6.  Check if the name actually changed:             // in case of API return correct message and status
                -   create a client                         // but actually does not update the name
                -   get clientId
                -   send getClientById request
                -   get nameBefore
                -   update client
                -   send getClientById request
                -   get nameAfter
                -   compare the nameBefore and nameAfter:
                    describe('check if the name actually updated', () => {
                        let clientId
                        let paramBefore
                        let paramAfter

                        before(async () => {
                          clientId = (await clientHelper.createClient()).body.payload
                          paramBefore = (await clientHelper.getSingle(clientId)).body.payload.name
                          await clientHelper.updateClient(clientId)
                          paramAfter = (await clientHelper.getSingle(clientId)).body.payload.name
                        })

                        it('check if updated name does not equal original name', () => {
                          expect(paramAfter).to.not.eq(paramBefore)
                        })
                      })
     22.7.  Add 'timeout' param to .mocharc.js to increase the timeout time:       // in case of timeout errors
                -   timeout: '20000'                                                // by default it is 2000 mc / 2 sec
     22.8.  Commit, push & PR
     22.9.  Update main branch / delete created (optional)

23. Create after hook for clients:
    23.1.   Define the steps:
            -   get clientList
            -   create a loop with deleteClient function inside:
                after('delete all clients', async () => {
                  let clientsList
                  clientsList = (await clientHelper.getAll()).body.payload.items
                  console.log(clientsList)                                          // optional (to check format of clientsList)
                  for (let i = 0; i < clientsList.length; i++) {
                    await clientHelper.deleteClient(clientsList[i]._id)
                  }
                })
            -   add to body of getAllClients helper:
                {limit:30}
            -   get clientsList                                                      // optional
            -   check the clientsList length                                         // optional (to check the q-ty of clients)
    23.2.   Commit, push & PR
    23.3.   Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------

24.  Minor updates on CI/CD pipeline:
        24.1.   Make pipeline run on specified tests only:
                    -   Comment spec option in .mocharc.js                           // this will be defined in scripts
                    -   Update 'test' script to:
                            "test": "mocha --spec tests/*.js --config .mocharc.js",
                    -   Add another script 'auth-test':
                            "auth-ci": "mocha --spec tests/auth.spec.js --config .mocharc.js"
                    -   Update running script in GitAction yaml file
                    -   OR Update test.yml file inside the project

        24.2.   OPTIONAL: Add schedule to pipeline:
                    on:
                        schedule:                           // https://crontab.guru/
                            - cron: '0 5 * * *'             // minute hour day month day of week

        24.3.   Commit, push & PR
        24.4.   Update main branch / delete created (optional)

------------------------------------------------------------------------------------------------------------------------

25.  Create a Postman - Newman pipeline:
     25.1.  Create a new branch
     25.2.  Install newman              -   npm i newman
     25.3.  Install htmlextra reporter   -   npm i newman-reporter-htmlextra
     25.4.  Create a folder for postman collections
     25.5.  Export PM collection and PM environment to created folder
     25.6.  Add additional scripts:
            -   "pmrun": "newman run postman/collection_name.json -e postman/evironment_name.json"
            -   "pmreport": "newman run postman/collection_name.json -e postman/evironment_name.json -r htmlextra --reporter-htmlextra-export PostmanReports/pmReport.html"
     25.7.  Runt scripts
     25.8.  Add necessary report to .gitignore
     25.9.  Commit, push & PR
     25.10. Update main branch / delete created (optional)

26.  Update after hooks in clients, vendors, services specs // UNDER ANALISYS
     26.1.

------------------------------------------------------------------------------------------------------------------------

30.  Collaborative work
     Precondition:
            -   add collaborators by email
            -   create a ruleset with explanations - ?????????

     30.1.  Collect the emails and send the invites to CBv6-test repo
     30.2.  Clone the project
     30.3.  npm i - to install all dependencies
     30.2.  Create and name personal branch
     30.3.  Declare the HW based on following structure:
            -   Entity:
                - create
                - get all
                - get single
                - update
                - delete
     30.4.  Skip failed tests (if exist in github actions run)